# -*- coding: utf-8 -*-
"""SituaciónProblemaBanco.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zAloNdxJ_1tZMNuZ4q2_5B6uKMiooIr4
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
data = pd.read_csv('/content/drive/MyDrive/Customer-Churn-Records.csv')

"""1. ¿Cuál es la distribución de clientes por región?"""

# Conteo exacto de clientes por región
region_counts = data['Geography'].value_counts()
print("Cantidad de Clientes por Región:")
print(region_counts)

# Gráfico de barras
region_counts.plot(kind='bar', figsize=(8, 6))
plt.title("Distribución de Clientes por Región")
plt.xlabel("Región")
plt.ylabel("Cantidad de Clientes")
plt.xticks(rotation=0)
plt.show()

"""2. ¿Cuál es la proporción de abandono vs. no abandono?"""

# Porcentaje exacto de clientes que abandonaron vs no abandonaron
exit_counts = data['Exited'].value_counts(normalize=True) * 100
print("Porcentaje de Clientes que Abandonaron vs No Abandonaron:")
print(exit_counts)

# Gráfico de pastel
data['Exited'].value_counts(normalize=True).plot(
    kind='pie', autopct='%1.1f%%', labels=["No Abandonaron", "Abandonaron"], figsize=(8, 8))
plt.title("Proporción de Clientes que Abandonaron")
plt.ylabel("")  # Elimina la etiqueta del eje y
plt.show()

"""3. ¿Cuál es el puntaje crediticio promedio por región?"""

# Puntaje crediticio promedio por región
credit_score_by_region = data.groupby('Geography')['CreditScore'].mean()
print(credit_score_by_region)

"""4. ¿Cuál es la región con mayor porcentaje de abandono?"""

# Región con mayor porcentaje de abandono
abandon_rate_by_region = data.groupby('Geography')['Exited'].mean() * 100
print(abandon_rate_by_region.sort_values(ascending=False))

"""5. ¿Cuál es el promedio de edad de los clientes que abandonaron el banco?



"""

# Promedio de edad de los clientes que abandonaron
average_age_churn = data[data['Exited'] == 1]['Age'].mean()
print(f"Promedio de edad de los clientes que abandonaron: {average_age_churn}")

"""6. ¿Cuál es la probabilidad de que un cliente tenga saldo nulo (Balance = 0)?"""

# Probabilidad de saldo nulo
p_saldo_nulo = (data['Balance'] == 0).mean()
print(f"Probabilidad de que un cliente tenga saldo nulo: {p_saldo_nulo:.2f}")

"""7. ¿Cuál es la probabilidad conjunta de que un cliente haya abandonado y tenga más de 2 productos bancarios?"""

# Probabilidad conjunta de abandono y más de 2 productos
p_abandono_y_mas_productos = ((data['Exited'] == 1) & (data['NumOfProducts'] > 2)).mean()
print(f"Probabilidad conjunta de abandono y más de 2 productos: {p_abandono_y_mas_productos:.2f}")

"""8. ¿Cuál es la probabilidad condicional de que un cliente haya abandonado dado que tiene más de 2 productos?"""

# Probabilidad condicional de abandono dado que tiene más de 2 productos
p_abandono_dado_mas_productos = ((data['Exited'] == 1) & (data['NumOfProducts'] > 2)).sum() / (data['NumOfProducts'] > 2).sum()
print(f"Probabilidad condicional de abandono dado que tiene más de 2 productos: {p_abandono_dado_mas_productos:.2f}")

"""9. ¿Qué proporción de gente tiene cada tipo de tarjeta?"""

# Calcular la proporción de clientes por tipo de tarjeta
card_type_proportion = data['Card Type'].value_counts(normalize=True) * 100

# Mostrar resultados
print("Proporción de clientes por tipo de tarjeta:")
print(card_type_proportion)

# Crear un gráfico de pastel
plt.figure(figsize=(8, 8))
plt.pie(
    card_type_proportion,
    labels=card_type_proportion.index,
    autopct='%1.2f%%',
    startangle=140,
    explode=[0.05] * len(card_type_proportion)  # Separar las secciones ligeramente
)
plt.title("Proporción de Clientes por Tipo de Tarjeta")
plt.show()

"""10. ¿Qué tan activo está cada género en promedio?"""

# Actividad promedio por género
activity_by_gender = data.groupby('Gender')['IsActiveMember'].mean()*100
print(activity_by_gender)

"""11. ¿Cuál es el salario estimado promedio de los clientes satisfechos?"""

# Salario estimado promedio de clientes satisfechos
satisfied_salary_avg = data[data['Satisfaction Score'] > 3]['EstimatedSalary'].mean()
print(f"Salario promedio de clientes satisfechos: {satisfied_salary_avg}")

"""12. ¿Cuál es la diferencia en el balance promedio entre clientes que abandonaron y los que no?"""

# Diferencia en balance promedio
balance_churn = data[data['Exited'] == 1]['Balance'].mean()
balance_no_churn = data[data['Exited'] == 0]['Balance'].mean()
difference = balance_churn - balance_no_churn
print(f"Promedio de los que abandonaron: {balance_churn}")
print(f"Promedio de los que no abandonaron: {balance_no_churn}")
print(f"Diferencia en balance promedio: {difference}")

"""13. ¿Cuál es el valor esperado del saldo (Balance) considerando la segmentación por grupos de edad?"""

# Crear rangos de edad
bins = [18, 25, 35, 45, 55, 65, 100]  # Rango de edad
labels = ['18-25', '26-35', '36-45', '46-55', '56-65', '65+']
data['AgeGroup'] = pd.cut(data['Age'], bins=bins, labels=labels, right=False)

# Calcular el valor esperado del saldo por grupo de edad
balance_by_age_group = data.groupby('AgeGroup')['Balance'].mean()
print(balance_by_age_group)

"""14. ¿Cuál es la media, mediana y desviación estándar del puntaje crediticio?"""

# Estadísticas descriptivas del puntaje crediticio
credit_mean = data['CreditScore'].mean()
credit_median = data['CreditScore'].median()
credit_std = data['CreditScore'].std()

print(f"Media del Puntaje Crediticio: {credit_mean}")
print(f"Mediana del Puntaje Crediticio: {credit_median}")
print(f"Desviación Estándar del Puntaje Crediticio: {credit_std}")

"""15. ¿Cómo se comparan las distribuciones de saldo entre clientes activos e inactivos?"""

# Histograma del saldo por actividad
sns.histplot(data, x='Balance', hue='IsActiveMember', bins=20, kde=True)
plt.title("Distribución del Saldo por Actividad")
plt.xlabel("Saldo")
plt.ylabel("Frecuencia")
plt.legend(title="Actividad", labels=["Inactivo", "Activo"])
plt.show()

"""16. ¿La proporción de abandono es la misma en las diferentes regiones?
Hipótesis nula (𝐻0): La proporción de abandono es igual en todas las regiones.
Hipótesis alternativa (𝐻1): La proporción de abandono difiere entre regiones.
"""

from scipy.stats import chi2_contingency

# Tabulación cruzada de región y abandono
region_exited = pd.crosstab(data['Geography'], data['Exited'])

# Prueba de chi-cuadrado
chi2, p_value, dof, expected = chi2_contingency(region_exited)

print(f"Estadístico chi-cuadrado: {chi2}")
print(f"p-valor: {p_value}")
if p_value < 0.05:
    print("Rechazamos la hipótesis nula: La proporción de abandono difiere entre regiones.")
else:
    print("No se rechaza la hipótesis nula: La proporción de abandono es la misma en todas las regiones.")

"""17. ¿Hay una diferencia significativa en el saldo promedio entre hombres y mujeres?
Prueba de hipótesis:
𝐻0: La media del saldo es igual entre hombres y mujeres.
𝐻1 : La media del saldo es diferente entre hombres y mujeres.
"""

from scipy.stats import ttest_ind

# Dividir datos por género
balance_male = data[data['Gender'] == 'Male']['Balance']
balance_female = data[data['Gender'] == 'Female']['Balance']

# Prueba t para medias independientes
t_stat, p_value = ttest_ind(balance_male, balance_female)

print(f"Estadístico t: {t_stat}")
print(f"Valor p: {p_value}")
if p_value < 0.05:
    print("Rechazamos la hipótesis nula: Hay una diferencia significativa en el saldo promedio entre hombres y mujeres.")
else:
    print("No se rechaza la hipótesis nula: No hay evidencia suficiente para una diferencia significativa.")
